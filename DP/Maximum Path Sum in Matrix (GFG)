--------------------------------------
   //Bottom Up Approach: O(N*N)
-------------------------------------
//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:
    int maximumPath(int N, vector<vector<int>> Matrix)
    {
        // code here
        int t[N][N];//2d dp array
        for(int i = 0;i<N;i++)
        {
            for(int j = 0;j<N;j++)
            {
                if(i==0)
                {
                    t[i][j] = Matrix[i][j];
                }
                else if(j==0)
                {
                    t[i][j] = Matrix[i][j]+max(t[i-1][j], t[i-1][j+1]);
                }
                else if(j==N-1)//last column
                {
                    t[i][j] = Matrix[i][j]+max(t[i-1][j],t[i-1][j-1]);
                }
                else
                {
                    t[i][j] = Matrix[i][j]+max(t[i-1][j], max(t[i-1][j-1],t[i-1][j+1]));
                }
            }
        }
        int maxim = INT_MIN;
        //traverse the last row and find maximum
        for(int j = 0;j<N;j++)
        {
            maxim = max(maxim, t[N-1][j]);
        }
        return maxim;
        
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int N;
        cin>>N;
        vector<vector<int>> Matrix(N, vector<int>(N, 0));
        for(int i = 0;i < N*N;i++)
            cin>>Matrix[(i/N)][i%N];
        
        Solution ob;
        cout<<ob.maximumPath(N, Matrix)<<"\n";
    }
    return 0;
}
// } Driver Code Ends
