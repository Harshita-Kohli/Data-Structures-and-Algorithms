//{ Driver Code Starts
//Initial function template for C++

#include<bits/stdc++.h>
using namespace std;
#define ll long long 

// } Driver Code Ends
//User function template for C++

class Solution{
    public:

    //Function to check if two arrays are equal or not.
    bool check(vector<ll> A, vector<ll> B, int N) {
        //code here
        //using 2 hashmaps
        // unordered_map<int,int>mp1;
        // unordered_map<int,int>mp2;
        // for(int i = 0;i<N;i++)
        // {
        //     mp1[A[i]]++;
        // }
        // for(int i = 0;i<N;i++)
        // {
        //     mp2[B[i]]++;
        // }
        // for(int i = 0;i<N;i++)
        // {
        //     if(mp1[B[i]]!=mp2[B[i]])
        //     {
        //         return false;
        //     }
        // }
        // return true;
        //using Single hashmap:
        unordered_map<int,int>mp;
        for(int i = 0;i<N;i++)
        {
            mp[A[i]]++;
        }
        for(int i = 0;i<N;i++)
        {
            if(mp.find(B[i])==mp.end())
            {
                return false;
            }
            //otherwise, decrement the count of B[i] in mp
            mp[B[i]]--;
        }
        for(auto it:mp)
        {
            if(it.second!=0)//if any number in A was not having same freq in B, then return false
            {
                return false;
            }
        }
        return true;
    }
};

//{ Driver Code Starts.
int main()
 {
    int t;
    cin>>t;
    while(t--) {
        int n;
        cin>>n;
        
        vector<ll> arr(n,0),brr(n,0);
        
        // increase the count of elements in first array
        for(ll i=0;i<n;i++)
            cin >> arr[i];
        
        
        // iterate through another array
        // and decrement the count of elements
        // in the map in which frequency of elements
        // is stored for first array
        for(ll i=0;i<n;i++)
            cin >> brr[i];
        Solution ob;
        cout << ob.check(arr,brr,n) << "\n";
    }
	return 0;
}
// } Driver Code Ends
