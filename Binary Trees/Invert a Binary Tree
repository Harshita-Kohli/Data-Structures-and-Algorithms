/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solve(TreeNode* root)
    {
        if(!root->left && !root->right){
           return;//leaf node is returned as it is
       } 
        if(root->left)//recursive call on left child if it exists
        {
            solve(root->left);
        }
        if(root->right)//recursive call on right child if it exists
        {
            solve(root->right);
        }
        
        TreeNode* l = root->left;//save pointer to left child
        TreeNode* r = root->right;//save pointer to right child
        
        root->left = r; //make the prev right child as the new left child now
        root->right = l;//make the prev left child as the new right child now
        return;
    }
    TreeNode* invertTree(TreeNode* root) {
       if(root==NULL)
       {
           return NULL;//empty tree is returned as it is
       }
        solve(root);
        return root;
    }
};
