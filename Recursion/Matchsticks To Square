-----------------------------
Backtracking Problem:
-----------------------------
class Solution {
public:
    bool solve(vector<int>& matchsticks,int idx, vector<int>&side, int target)
    {
        //base case:If we have been able to make 3 sides of square with the matchsticks, and only 1 side is left, then we know for sure that the 3rd side can be made because leftover length of matchsticks is 4 and target is also 4
        if(idx>=matchsticks.size())
        {
             return side[0]==side[1] && side[1]==side[2]&& side[2]==target;
        }
        //har matchstick ke liye 4 decision hain: either be placed at left side or right or top or bottom side of square
        for(int i = 0;i<4;i++)
        {
            if(side[i]+matchsticks[idx]>target)
            {
                //recursion nahi karenge kyunki agar matchstick[idx] ko ith side pe rakhte hain to length exceed ho jati hai, to ab i ko increment karo instead of going in recursion aur is matchstick ko i+1 th side pe rakhke dekho
                continue;
            }
            
            side[i]+=matchsticks[idx];
            // recursive call: we need to do the same for the next matchstick ie matchsticks[idx+1] and find at which side can it be placed out of the four sides 
            if(solve(matchsticks,idx+1,side,target)) //agar ye true return karta hai, it means that we have been able to make a square with these matchsticks 
            {
                return true;
            }
            side[i]-=matchsticks[idx];//if this recursion was not corect, then backtrack
        }
        return false;//agar sari matchsticks ke liye sahi decisions lene ke baad bhi square nahi ban paya, to return false
    }
    bool makesquare(vector<int>& matchsticks) {
        int n = matchsticks.size();
        if(n == 0) return false;
        int sum = 0;//will store total sum of lengths of the matchsticks
        for(int i = 0;i<n;i++)
        {
            sum +=matchsticks[i];
        }
        if(sum%4!=0)
        {
            return false;//no way can we make a square of side 4 by using these matchsticks coz there sum cannot be divided into 4 equal parts
        }
        //otherwise:
        
        sort(matchsticks.rbegin(),matchsticks.rend());//sorting in descending order
        int target = sum/4; //becoz side of each length will be sum/4
        vector<int>side(4);//side array will have sides of all 4 sides
        return solve(matchsticks,0,side,target); //notice pass side by reference or it causes TLE
    }
};



