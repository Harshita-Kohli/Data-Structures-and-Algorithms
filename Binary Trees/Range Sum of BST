/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

------------------------------------
  O(n) space and O(n) time
----------------------------------
class Solution {
public:
    // vector<int> ans;
    // void inorder(TreeNode* root)
    // {
    //     if(root==NULL)
    //     {
    //         return;
    //     }
    //     inorder(root->left);
    //     ans.push_back(root->val);
    //     inorder(root->right);
    //     return;
    // }
    // int rangeSumBST(TreeNode* root, int low, int high) {
    //     //do inorder traversal of BST to get the sorted array
    //     if(root==NULL)
    //     {
    //         return 0;
    //     }
    //     int sum = 0;
    //     inorder(root);
    //     for(int i = 0;i<ans.size();i++)
    //     {
    //         if(ans[i]>=low && ans[i]<=high)
    //         {
    //             sum+=ans[i];
    //         }
    //     }
    //     return sum;
    // }
<------------------------------------------------------------------------------>
  O(1) space and O(n) time
----------------------------------
class Solution {
public:
    int sum = 0;
     int rangeSumBST(TreeNode* root, int low, int high) {
         if(root==NULL)
         {
             return sum;
         }
         //inorder traversal:
         //left 
         rangeSumBST(root->left, low, high);
         if(root->val>=low && root->val<=high)
         {
             sum+=root->val; //root
         }
         //right:
         rangeSumBST(root->right, low, high);
         return sum;
         
     }
};
