---------------------------
O(n) Time and O(1) Space
-------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int temp = 0;//this will store the sum of the 2 bits
        ListNode* aux = new ListNode(0);
        ListNode* itr = aux; //iterate over the new linked list to maintain the new nodes
        while(temp || l1 || l2)
        {
            if(l1&&l2) //if both nodes exist
            {
                temp+=l1->val + l2->val;
            }
            else if(l1)//if only l1 exists
            {
                temp+=l1->val;
            }
            else if(l2) //if only l2 exists
            {
                temp+=l2->val;
            }
            else//if both nodes don't exist
            {
                temp+=0;
            }
            
            itr->next = new ListNode(temp%10);//store the single digit sum in itr ie temp%10
            itr = itr->next;//move itr to next position
            
            //now see if a carry was generated by adding the previous two nodes
            temp = temp/10;//if a single digit number, then temp will =0 (no carry) otherwise if temp was a double digit or greater number then carry was generated, Eg temp = 20 => 20/10 = 2 so carry was 2
            
            //now move the pointers forward
            if(l1)
            {
                l1 = l1->next;
            }
            if(l2)
            {
                l2 = l2->next;
            }
        }
        return aux->next;
    }
};
