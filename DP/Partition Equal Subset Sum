We can build upon the SUBSET SUM PROBLEM for finding solution to this problem:

class Solution {
public:
    bool subsetSum(vector<int>& nums, int target){
        int n = nums.size();
        bool t[n+1][target+1]; //2d dp array where t[i][j] denotes whether there is a subset possible for array of size = i with sum = j
        //initialisation of 2d dp array
        for(int i = 0;i<n+1;i++){
            for(int j = 0;j<target+1;j++){
                if(i==0){
                    t[i][j] = false;//if size of array is 0, we can't have any subset of sum j
                }
                if(j==0){
                    t[i][j] = true;//if target sum is 0, we have a null set as a subset
                }
            }
        }
        //filling the rest of the matrix 
        for(int i = 1;i<n+1;i++){
            for(int j = 1;j<target+1;j++){
                if(nums[i-1]<=j)//either include ot exclude
                {
                    t[i][j] = t[i-1][j-nums[i-1]] || t[i-1][j];
                }
                else{ //we can't include the nums[i-1]th element in the subset
                    t[i][j] = t[i-1][j];
                }
            }
        }
        return t[n][target];
    }
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        bool ans = false;
        for(int i = 0;i<n;i++){
            sum+=nums[i];//calculate the sum of the given array
        }
        if(sum%2!=0) 
        {
            return false;//if sum is odd, we can't divide it into 2 subsets of equal sum
        }
        else if(sum%2==0)//if sum is even
        {
            ans = subsetSum(nums, sum/2);
        }
        return ans;
    }
};
