//TC: O(N)
//SC: O(N) coz of stack
class Solution {
public:
    static bool cmp(vector<int>&v1,vector<int>&v2)
    {
        return v1[0]==v2[0]?v1[1]>v2[1]:v1[0]<v2[0];
    }
    int numberOfWeakCharacters(vector<vector<int>>& nums)
    {
        int count=0;
        int n=nums.size();
        sort(nums.begin(),nums.end(),cmp);
        stack<pair<int,int>>s;
        for(int i=0;i<n;i++)
        {
            while(s.size()&&s.top().first<nums[i][0]&&s.top().second<nums[i][1])
            {
                s.pop();
                count++;
            }
            s.push({nums[i][0],nums[i][1]});
        }
        return count;
    }
};

//-------------------------------------------------------
//TC: O(N)
//SC: O(1) 
class Solution {
public:
    static bool cmp(vector<int>&a, vector<int>&b)
    {
        if(a[0]==b[0])
        {
            return a[1]>b[1];//to handle the edge case, sort in dec order of defence otherwise, it will give wrong answer for (2,1) (2,2) -> will give ans = 1, but answer should be 0
        }
        return a[0]<b[0];//simply sort in inc order of defence
    }
    int numberOfWeakCharacters(vector<vector<int>>& prop) {
        int n = prop.size();
        int maxim = INT_MIN;
        int cnt = 0;
        sort(prop.begin(),prop.end(),cmp);//sort the vector acc to the attack property
        for(int i = n-1;i>=0;i--)//start from rightmost element
        {
            if(prop[i][1]<maxim)//if we found a weak character
            {
                cnt++;
            }
            else //if defence of the character is>maxim, simply update the maximum so far for the left wale characters
            {
                maxim = prop[i][1];
            }
        }
        return cnt;
    }
};
