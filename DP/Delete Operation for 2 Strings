class Solution {
public:
    //Eg:word1 = leetcode, word2 = eetcos
    //compute lcs of the 2 strings = eetco (lcs_len = 5)
    //from word1, we need to delete word1.length()-5 characters
    //from word2 also, we need to delete word2.length()-5 characters
    //so a total of [word1.length()-5 +word2.length()-5] characters are to be removed
    int lcs(string word1, string word2){
        int m = word1.length();
        int n = word2.length();
        int t[m+1][n+1];//2d dp array
        
        //bottom up approach:
        for(int i = 0;i<m+1;i++){
            for(int j = 0;j<n+1;j++){
                if(i==0 || j==0){
                    t[i][j] = 0;//nothing common if either of the 2 strings is empty
                }
            }
        }
        for(int i = 1;i<m+1;i++){
            for(int j = 1;j<n+1;j++){
                if(word1[i-1]==word2[j-1]){
                    t[i][j] = 1+t[i-1][j-1];
                }
                else{
                    t[i][j] = max(t[i-1][j],t[i][j-1]);
                }
            }
        }
        return t[m][n];
    }
    int minDistance(string word1, string word2) {
        int lcs_len = lcs(word1, word2);
        //wordl.length()-lcs_len gives the no of charcters to be removed from word1
        //word2.length()-lcs_len give the no of characters to be removed from word2
        //then add these two to get the total no of deletions to be made
        return word1.length()-lcs*lcs_len+word2.length()-lcs_len; //add the lengths of the two words and from it subtract the lcs twice...this gives the 
    }
};
