class Solution {
public:
    //Bottom up Approach: O(n^3) time and space complexity
    int findMaxForm(vector<string>& strs, int m, int n) {
        int l = strs.size();
        int t[l+1][m+1][n+1];//3d dp array because here 3 parameters are changing: l, m and n
        int count_of_1 = 0;
        int count_of_0 = 0;
        //initialisation:
        for(int i = 0;i<l+1;i++){
            for(int j = 0;j<m+1;j++){
                for(int k = 0;k<n+1;k++){
                    t[i][j][k] = 0;
                }
            }
        }
        //filling the rest of the 3d matrix:
        for(int i = 1;i<l+1;i++){
            count_of_1 = count(strs[i-1].begin(), strs[i-1].end(),'1');
            count_of_0 = strs[i-1].length()-count_of_1;
            
            for(int j = 0;j<m+1;j++){ //note, we start j and k from 0, not form 1
                for(int k = 0;k<n+1;k++){
                    if(count_of_0<=j && count_of_1<=k){ //choice as to either include or exclude
                        t[i][j][k] = max(1+t[i-1][j-count_of_0][k-count_of_1], t[i-1][j][k]);
                        
                    }
                    else{ //we can't include this string if no of 1s or no of 0s is greater than m and n respectively
                        t[i][j][k] = t[i-1][j][k];
                    }
                }
            }
        }
        return t[l][m][n];
    }
};
