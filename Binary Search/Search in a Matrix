----------------------------------------------------------------------
  //Brute Force: O(N^2) Use Nested For-loop and do linear search to search for the target element
  //Better: O(n logn) Go to each row, and then use binary search to search for the element in that particular row
  //Even Better: Use Binary Search to find the suitable row where searching needs to be done, Then performbinary search on that row to find the target
  ---------------------------------------------------------------------------------------
class Solution {
public:
    bool binarySearch(vector<int>arr, int target)
    {
        int n = arr.size();
        int l = 0;
        int u = n-1;
        //Binary Search to find the target element in the row 
        while(l<=u)
        {
            int mid = l+(u-l)/2;
            if(target==arr[mid])// we have found the target element in this row
            {
               return true;
            }
            else if(target<arr[mid])
            {
                u = mid-1;
            }
            else
            {
                l = mid+1;
            }
        }
        return false;
    }
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int r = matrix.size();
        int c = matrix[0].size();
        //BINARY SEARCH TO FIND THE TARGET ROW:
        int l = 0;
        int u = r-1;
        bool flag = false;
        while(l<=u)
        {
            int mid = l+(u-l)/2;
            if(target>=matrix[mid][0] && target<=matrix[mid][c-1])
            {
                //target might lie in this row
                bool ans = binarySearch(matrix[mid],target);
                return ans;
            }
            else if(target<matrix[mid][0])
            {
                u = mid-1;//we need to go towards the starting row
            }
            else
            {
                l = mid+1;//we need to go towards the ending row
            }
        }
        return false;
    }
};
