class Solution {
public:
    //Sorting : O(nlogn) approach
    // int maximumProduct(vector<int>& nums) {
    //     int n = nums.size();
    //     //sort the array in ascending order: O(nlogn)
    //     sort(nums.begin(),nums.end());
    //     int op1 = nums[n-1]*nums[n-2]*nums[n-3];
    //     int op2 = nums[0]*nums[1]*nums[n-1];
    //     return max(op1, op2);
    // }
    --------------------------------------------------------
    //no need to sort the array: O(n) approach
    int maximumProduct(vector<int>& nums) {
        //find out min1, min2 and max1
        //or max1, max2 max3
        int n = nums.size();
        int min1 = INT_MAX, min2 = INT_MAX;
        
        int max1 = INT_MIN, max2 = INT_MIN, max3 = INT_MIN;
        
        for(int i = 0;i<n;i++){
            if(nums[i]<=min1)
            {
                min2 = min1;//min1 now becomes the second minimum
                min1 = nums[i];//nums[i] is now the minimum most
            }
            else if(nums[i]<=min2)//nums[i] lies between min1 and min2
            {
                min2 = nums[i];//update min2 with nums[i]
            }
            if(nums[i]>=max1){
                max3 = max2; //max2 will now become the 3rd largest
                max2 = max1; //max1 will now be second largest 
                max1 = nums[i];//nums[i] will now be the maximum most
            }
            else if(nums[i]>=max2){ //if nums[i] lies between max1 and max2
                max3 = max2;//min2 now becomes the 3rd largest
                max2 = nums[i];//then we can update nums[i] as the second maximum
            }
            else if(nums[i]>=max3)//if nums[i] lies between max2 and max3
            {
                max3 = nums[i];//nums[i] becomes the 3rd largest
            }
        }
        return max(max1*max2*max3,min1*min2*max1);
    }
};
