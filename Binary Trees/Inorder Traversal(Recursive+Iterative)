/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //Recursive approach:
    //TC: O(N)
    // SC: O(H), where h is the height of the tree(recursive call stack)
    // vector<int>ans;
    // void helper(TreeNode* root)
    // {
    //     if(root==NULL)
    //         return;
    //     //recursive case:
    //     helper(root->left);
    //     ans.push_back(root->val);
    //     helper(root->right);
    //     return;
    // }
    // vector<int> inorderTraversal(TreeNode* root) {
    //     if(root==NULL)
    //     {
    //         return vector<int>();//return empy vector if tree is empty!
    //     }
    //     helper(root);
    //     return ans;
    // }
    //--------------------------------------------------
    //Iterative Approach:
    //TC: O(N)
    //SC: O(N)+O(N)+O(N) because we used a map and a stack as auxilliary space
    vector<int> inorderTraversal(TreeNode* root) {
        unordered_map<TreeNode*,int>cnt;
        stack<TreeNode*>st;
        vector<int>ans;
        st.push(root);
        while(!st.empty())
        {
            TreeNode* curr = st.top();
            if(curr==NULL)
            {
                st.pop();
                continue;
            }
            if(cnt[curr]==0)
            {
                st.push(curr->left);
            }
            else if(cnt[curr]==1)
            {
                ans.push_back(curr->val);
            }
            else if(cnt[curr]==2)
            {
                st.push(curr->right);
            }
            else
            {
                st.pop();//completely processed node
            }
            cnt[curr]++;
        }
        return ans;
    }
};
