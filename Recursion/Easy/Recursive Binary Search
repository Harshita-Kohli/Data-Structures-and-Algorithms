class Solution{
    public:
    //Recursive Binary Search:
    //TC: O(log N)
    //SC: Auxilliary Stack space becoz of recursion!
    int helper(int arr[], int s, int e, int K){
        //base case:
        if(s>e){
            return -1;//if till now we couldn't find the K, then return 0
        }
        //recursive:
        int mid = s+(e-s)/2;
        if(arr[mid]==K){
            return 1;
        }
        else if(arr[mid]<K){ //see on the right of mid 
            return helper(arr,mid+1,e,K);
        }

        return helper(arr,s,mid-1,K);//see on the left of mid
    }
    int searchInSorted(int arr[], int N, int K) 
    { 
    
       // Your code here
       //Recursive Binary Search:
       int s = 0;
       int e = N-1;
       int ans = helper(arr, s,e,K);
       return ans;
       
    }
};

//{ Driver Code Starts.


int main(void) 
{ 
    
    int t;
    cin >> t;
    while(t--){
        int n, k;
        cin >> n >> k;
        
        int arr[n];
        
        for(int i = 0;i<n;i++){
            cin >> arr[i];
        }
        
        Solution ob;
        cout << ob.searchInSorted(arr, n, k) << endl;

    }

	return 0; 
} 

// } Driver Code Ends
