// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{

	public:
	int mod = 1000000007;
	int perfectSum(int arr[], int n, int sum)
	{
        // Your code goes here
        //Bottom Up Approach:
        int t[n+1][sum+1];//2d dp array, where t[i][j] will store the count of all subsets of sum  = j when array is of size = i
        //rows denote the size of the array and columns denote the target sum
        //initialisation:
        for(int i = 0;i<n+1;i++){
            for(int j = 0;j<sum+1;j++){
                if(i==0){
                    t[i][j] = 0;//if size of array = 0, we cannot have any subset 
                }
                if(j==0){
                    t[i][j] = 1;//1 subset for the target sum = 0 ie null set
                }
            }
        }
        //filling the rest of the matrix:
        for(int i = 1;i<n+1;i++){
            for(int j = 0;j<sum+1;j++){ //NOTE: j starts from 0
                if(arr[i-1]<=j){ //choice whether to include or exclude, and add answers from both the cases..coz we wnna get all the subsets 
                    t[i][j] = (t[i-1][j-arr[i-1]]+t[i-1][j])%mod;
                }
                else{//we have to exclude
                    t[i][j] = t[i-1][j]%mod;
                }
                // if(arr[i-1]>j){
                //     t[i][j] = t[i-1][j];
                // }
                // else if(arr[i-1]<=j){
                //     t[i][j] = (t[i-1][j-arr[i-1]]+t[i-1][j])%1000000007;
                // }
            }
        }
        return (t[n][sum]);
	}  
};
