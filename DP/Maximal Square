class Solution {
public:
    //Slight variation of count square submatrices with all ones:
    int maximalSquare(vector<vector<char>>& matrix) {
        int m = matrix.size();//no of rows
        int n = matrix[0].size();//no of columns
        int t[m][n];//2d dp array where t[i][j] denotes ki matrix[i][j] kitne square submatrices ka bottom right hai
        int maxim = 0;
        //initialisation:
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                if(i==0 || j==0){
                    t[i][j] = matrix[i][j]-'0';//becoz if rows or columns are 0, then size of square is 0
                }
            }
        }
        //filling the rest of the matrix:
        for(int i = 1;i<m;i++){
            for(int j = 1;j<n;j++){
                if(matrix[i][j] == '0'){
                    t[i][j] = 0;//0 contributes 0 square submatrices
                }
                else //if(matrix[i-1][j-1] == 1)
                {
                    t[i][j] = 1+min(t[i-1][j-1],min(t[i-1][j],t[i][j-1]));
                    maxim = max(maxim,t[i][j]);
                }
            }
        }
        for(int i = 0;i<m;i++){
            for(int j = 0;j<n;j++){
                maxim = max(maxim,t[i][j]);
            }
        }
        return maxim*maxim;
    }
};
