--------------------------------------------
// O(n) time and O(n) space
-----------------------------------------
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        int t[n+1];
        t[0] = 0;//0 cost to reach 0th and 1st step because we can start from these
        t[1] = 0;
         for(int i = 2;i<n+1;i++){
            t[i] = min(t[i-1]+cost[i-1], t[i-2]+cost[i-2]);
        }
        return t[n];
    }
};
-----------------------------------------------------------------------
// O(n) time and O(1) space(coz we used no extra space)
---------------------------------------------------------------
//    class Solution {
// public:
//     int minCostClimbingStairs(vector<int>& cost) {  
//         int n = cost.size();
//         if(n==0 || n==1)
//         {
//             return 0;//0 cost to reach 0th or 1st step
//         }
//         int first = 0;
//         int second = 0;
//         int third = 0;
//         for(int i = 2;i<n+1;i++){
//             third = min(first+cost[i-2],second+cost[i-1]);
//             first = second;
//             second = third;
//         }
//         return third;
//     }
// };
