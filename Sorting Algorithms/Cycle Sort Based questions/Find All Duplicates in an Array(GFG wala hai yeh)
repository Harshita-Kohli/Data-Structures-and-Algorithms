//Cycle Sort: 
//TC: O(N)
SC: O(1)
//------------------------------------
class Solution{
  public:
    vector<int> duplicates(int arr[], int n) {
        // code here
        //Cyclic Sort:
        int i = 0;
        while(i<n){
            int correctInd = arr[i];//the number  nums[i] should be at nums[i] index
            if(arr[i]==arr[correctInd]){
                i++;//move forward(it actually handles duplicates also)
            }
            else{ //send nums[i] to its correct index by swapping
                swap(arr[i],arr[correctInd]);
            }
        }
        set<int>st;
        vector<int>ans;
        //now iterate again and see which numbers are still not at correct position, they are duplicates!
        for(int i = 0;i<n;i++){
            if(arr[i]!=i)//coz arr[i] is the duplicate jo abhi bhi galat jaga par baitha hai
            {
                st.insert(arr[i]);//sirf ek hi baar chahiye hume, multiple times nahi chahiye 
                //suppose 25 three times hai, to hume wo sirf ek hi baar chahiye
            }
        }
        //agar sare apni correct position pe hain, then simply return -1
        if(st.size()==0) return {-1};
        else{
            for(auto it:st){
                ans.push_back(it);
            }
        }
        return ans;
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t-- > 0) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) cin >> a[i];
        Solution obj;
        vector<int> ans = obj.duplicates(a, n);
        for (int i : ans) cout << i << ' ';
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends
