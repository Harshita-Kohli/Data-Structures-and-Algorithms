// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
public:
vector<string>ans;
//recursion hum karenge "BC" ke liye
    void solve(string ip, string op){
        //base case:
        if(ip.length()==0)//we have reached the leaf node, so op is a possible combination
        {
            ans.push_back(op);
            return;
        }
        
        string op1 = op+" "+ip[0];//include space
        string op2 = op+ip[0];//exclude space
        
        
        ip.erase(ip.begin()+0);//we have made the decision for this character
        
        //two choices: either include with prefix space or without prefix space
        solve(ip,op1);
        solve(ip,op2);
        return;
    }
    vector<string> permutation(string S){
        // Code Here
        string op = ""; //initially empty string
        op += S[0];//the output string will initially be holding the first charcter of S
        S.erase(S.begin()+0);//we remove the first character of S because we have 
        //already accepted it in the op string without space (only 1 choice)
        solve(S,op);
        return ans;
    }
};
// { Driver Code Starts.
int  main(){
    int t;
    cin>>t;
    while(t--){
        string S;
        cin>>S;
        vector<string> ans;
        Solution obj;
        ans = obj.permutation(S);
        for(int i=0;i<ans.size();i++){
            cout<<"("<<ans[i]<<")";
        }
        cout << endl;
    }
}
  // } Driver Code Ends
