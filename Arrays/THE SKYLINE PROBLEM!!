// TC: O(n logn) + O(n) coz we sort the points array and then do one linear traversal over it 
// SC: O(n) coz we used multiset and a vector of pairs
//NEW THING LEARNT: Multiset is a set that can store duplicate elements, and is useful coz erasing/removing from multiset is very easy - O(1)
//------------------------------------------------
//LINK(VERY VERY HELPFUL!!): https://leetcode.com/problems/the-skyline-problem/discuss/2094329/C%2B%2B-Easiest-Explanation-Ever-Guaranteed-Beginner-Friendly-Detailed-O(nlogn)
/-------------------------------------------------------------
class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        int n = buildings.size();
        multiset<int>pq{0};
        vector<vector<int>>ans;
        vector<pair<int,int>>points;
        for(int i = 0;i<n;i++){
            points.push_back({buildings[i][0],-buildings[i][2]});//put start with -ve height so that -ve height can indicate that it is start point
            
            //put ending point with +ve height so that +ve height can indicate that it is ending point
            points.push_back({buildings[i][1],buildings[i][2]});
        }
        
        sort(points.begin(),points.end());//sort the points acc to the x coordinates
        
        //now time to compute the skyline!
        int ongoingHeight = 0; //initially
        
        for(int i = 0;i<points.size();i++)
        {
            int currPoint = points[i].first;
            int currPointHeight = points[i].second;
            if(currPointHeight<0){ //if height is -ve, then that means this point is starting point, so we must put it to fallback height
              pq.insert(-currPointHeight);  
            }
            else{ //if height is +ve, it means it is the ending point of this height, so we must remove it from the fallback height
                pq.erase(pq.find(currPointHeight));
            }
            
            //now check if there is some better height than ongoingHeight in the pq
            // after inserting/removing heightAtI, if there's a change
            auto top = *pq.rbegin();
            if(ongoingHeight!= top){
                ongoingHeight = top;
                ans.push_back({currPoint,ongoingHeight});
            }
        }
        return ans;
    }
};
