// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

//Similar to LPS problem! 
Time Complexity : O(n^2) 
Space Complexity: O(n^2)
class Solution{
  public:
//   int t[1001][1001];
  int lcs(string s, string m){
      //bottom up:
      int n = s.length();
      int t[n+1][n+1]; //2d dp array
      for(int i = 0;i<n+1;i++){
          for(int j = 0;j<n+1;j++){
              if(i==0 || j==0){ //if either string is empty
                  t[i][j] = 0;
              }
          }
      }
      for(int i = 1;i<n+1;i++){
          for(int j = 1;j<n+1;j++){
              if(s[i-1]==m[j-1]){
                  t[i][j] = 1+t[i-1][j-1];
              }
              else{
                  t[i][j] = max(t[i-1][j],t[i][j-1]);
              }
          }
      }
      return t[n][n];
      
  }
    int minimumNumberOfDeletions(string S) { 
        // code here
        int len = S.length();
        string temp = S;
        reverse(S.begin(),S.end());
        string m = S;
        
        int lps = lcs(temp,m);
        return len-lps;
    } 
};

// { Driver Code Starts.
int main(){
    int t;
    cin >> t;
    while(t--){
        string S;
        cin >> S;
        Solution obj;
        cout << obj.minimumNumberOfDeletions(S) << endl;
    }
    return 0;
}  // } Driver Code Ends
