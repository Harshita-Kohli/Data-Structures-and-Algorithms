/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 -----------------------------------------------------------------------
//O(N) TIME And O(N) SPACE coz of call stack used during recursion
------------------------------------------------------------------------
class Solution {
public:
    vector<vector<int>> ans;
    vector<int>temp;
    //Function To calculate height of the tree starting at a root node
    int heightCalc(TreeNode* root) //O(n) to calculate height, coz we go to each node
    {
        if(root==NULL)
        {
            return 0;
        }
        int leftans = heightCalc(root->left);
        int rightans = heightCalc(root->right);
        return 1+max(leftans,rightans);
    }
    //function to generate vector of nodes at each level
    void eachLevel(TreeNode* root, int height)//preorder type of traversal: O(n)
    {
        if(root==NULL)
        {
            return;
        }
        if(height==0)//reached the target level
        {
            temp.push_back(root->val);
            return;
        }
        eachLevel(root->left,height-1);
        eachLevel(root->right,height-1);
        return;
    }
    void solve(TreeNode* root) // O(n) coz we linearly traverse for i = 0 to i = h
    {
        if(root==NULL)
        {
            return;
        }
        int h = heightCalc(root);
        
        for(int i = 0;i<h;i++)
        {
            eachLevel(root,i);//compute the vector that stores nodes of one level
            ans.push_back(temp);//push that vector into ans
            temp.clear();//now erase everything from the temp vector to store the next level nodes
        }
        return;
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        //Recursive method:
        if(root==NULL) //if root node does not exist, tree is empty, simply return empty vector
        {
            return vector<vector<int>>();
        }
        solve(root);
        return ans;
    }
};
