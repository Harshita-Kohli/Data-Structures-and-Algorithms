/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//Using DFS traversal(PreOrder Traversal)
//TC: O(n)
//SC: O(n) coz we use a map to store the nodes in a root to leaf path, and in worst the tree can be a scewed tree having all n nodes in the root to leaf path
class Solution {
public:
    int count = 0;
    map<int,int>mp;
    void helper(TreeNode* root)
    {
        if(root==NULL)
        {
            return;
        }
        //Preorder: root->left->right
        mp[root->val]++;
        
        if(!root->left && !root->right)//when we reach a leaf node, check how many odd freq nodes we encountered in the path 
        {
            int odd=0;
            for(auto it:mp)
            {
                if(it.second%2!=0)//the freq is odd
                {
                    odd++;
                }
            }
            if(odd<=1)//we can have atmost one odd freq node int he root to leaf path
            {
                count++;
            }
           return; 
        }
        helper(root->left);
        if(root->left)
        {
             mp[root->left->val]--;//backtrack
        }
        helper(root->right);
        if(root->right)
        {
            mp[root->right->val]--;//backtrack
        }
        return;
    }
    int pseudoPalindromicPaths (TreeNode* root) {
        if(root==NULL)
        {
            return 0;
        }
        helper(root);
        return count;
    }
};
