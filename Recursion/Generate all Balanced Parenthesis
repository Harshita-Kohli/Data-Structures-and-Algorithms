class Solution {
public:
    vector<string> ans;//this will contain all the balanced parenthesis
    void solve(int ip, string op, int open, int close)//notice here dat type of ip and op is diff...ip is number, op is string -> so we use extended ip-op method
    {
        //base case:
        if(open==0 && close==0)//we have reached leaf node, we should put op into ans
        {
            ans.push_back(op);
            return;
        }
        //ye recursive call to pakka hi hai:
        if(open!=0) //jab tak opening brackets kahtam nahi hote, we can always include them
        {
            string op1 = op;
            op1+='(';
            solve(ip,op1,open-1,close);//1st choice is to use'('
        }
        //ye 2nd rec call tabhi hogi jab open<close, tabhi hum closing bracket use karenge
        if(open<close){ //to balance the string, we include ')'
            string op2 = op;
            op2+=')'; //include closing bracket
            solve(ip,op2,open,close-1);//dec no of closed brackets
        }
    return; //when both recursive calls are done
    }
    vector<string> generateParenthesis(int n) {
        int open = n;
        int close = n;
        string op = "";//this is the initially empty op string
        solve(n,op,open,close);
        return ans;
    }
};
