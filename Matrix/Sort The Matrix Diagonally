//WE use the concept that elements in a diagonal will have same difference ie i-j , so use a map to store the elements of each diagonal and then sort each of those vectors of elements to get the sorted diagonal elements 
//TC: O(row*col) coz we have 2 for loops to traverse over the matrix
//SC: O((col+row-1)*largest diagonal size) because the range of difference (i-j) will be from -(col-1) to 0 to row-1. Eg: row = 3, col = 4, then the diff will range from [-3, -2, -1, 0, 1, 2], so we need these many keys in the map and corresponding to each key, we need to store the diagonal elements(so worst case me largest diagonal size)
class Solution {
public:
    vector<vector<int>> diagonalSort(vector<vector<int>>& mat) {
        int rows = mat.size();
        int cols = mat[0].size();
        map<int,vector<int>>mp;//key is the i-j wala difference and value is the vector that will denote the elements of the diagonal 
        for(int i = 0;i<rows;i++)
        {
            for(int j = 0;j<cols;j++)
            {
                mp[i-j].push_back(mat[i][j]);
            }
        }
        //now all the elements of this diagonal need to be sorted
        for(int k = -(cols-1);k<rows;k++)
        {
            sort(mp[k].begin(),mp[k].end());//sort each vector of the map
        }
        //so now we will store them back in sorted order
        for(int i = rows-1;i>=0;i--)
        {
            for(int j = cols-1;j>=0;j--)
            {
                mat[i][j] = mp[i-j].back();
                mp[i-j].pop_back();
            }
        }
        return mat;
    }
};
