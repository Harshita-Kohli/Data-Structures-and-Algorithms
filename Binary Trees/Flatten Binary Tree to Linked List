----------------------------------------------------
Recursive Aprroach:
TC:O(N)
SC:O(1)
-----------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //Recursive Approach: O(N) since we are visiting each node just once
    void flatten(TreeNode* root) {
        //base case:
        if(root==NULL)
        {
            return;
        }
        TreeNode* curr = root;//to iterate from the current root, we keep curr
        TreeNode* temp = curr->right;//saving the pointer to right subtree
       
        curr->right = curr->left;
        curr->left = NULL;
        //go to the rightmost end of the new right subtree to attach temp
        while(curr->right)
        {
            curr = curr->right;
        }
        curr->right = temp;//attach the previous right subtree at the right end of the new right subtree
        flatten(root->right);//recursive call for the right child of root
        return;
    }
};
