/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 -------------------------------------------------------------------
//O(N) Time becoz of linear traversal
//O(1) Space becoz we just used pointers and no auxilliary space
--------------------------------------------------------------------
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        //Corner cases:
        if(!list1) //1st linked list is null
        {
            return list2;
        }
        if(!list2) //2nd linked list is null
        {
            return list1;
        }
        //Take a Dummy Node that will be the start of the merged linked list
        ListNode* dummy = new ListNode(-1);//dummy node
        ListNode* temp = dummy; //to iterate and create a merged linked list
        while(list1 && list2)
        {
            if(list1->val <= list2->val)
            {
                temp->next = list1;
                list1 = list1->next;
            }
            else if(list1->val > list2->val)
            {
                temp->next = list2;
                list2 = list2->next;
            }
            //update temp
            temp = temp->next;
        }
        if(list1) //suppose if linked list 2 got exhausted and list1 is still left, we simply attach the leftover list1 to temp
        {
            temp->next = list1;
        }
         if(list2) //suppose if linked list 1 got exhausted and list2 is still left, we simply attach the leftover list2 to temp
        {
            temp->next = list2;
        }
      return dummy->next;//we return the next of the dummy node which is actually the head of the merged list
    }
};
