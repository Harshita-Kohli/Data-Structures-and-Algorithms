class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        //It is like Longest Common Subarray
        int n = nums1.size();
        int m = nums2.size();
        int maxim = 0;
        int t[n+1][m+1]; //2d dp array
        for(int i = 0;i<n+1;i++)
        {
            for(int j = 0;j<m+1;j++){
                if(i==0 || j==0){
                    t[i][j] = 0;
                }
            }
        }
        for(int i = 1;i<n+1;i++){
            for(int j = 1;j<m+1;j++){
                if(nums1[i-1]==nums2[j-1])//agar numbers match karte hain to hum length ko 1 se increase kardenge aur maxim ko bhi update karlenge
                {
                    t[i][j] = 1+t[i-1][j-1];
                    maxim = max(maxim,t[i][j]);
                }
                else{ //but agar match nahi karte to hum length = 0 kardenge us point pe kyunki hume ek CONTINUOUS common window ya subarray chahiye. Agar continuity khata ho jaati hai kahin par to hum length ka count 0 pe reset kardenge
                    t[i][j] = 0;
                }
            }  
        }
        return maxim;
    }
};
