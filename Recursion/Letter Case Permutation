class Solution {
public:
    vector<string>ans;
    void solve(string ip, string op){
       //base case:
        if(ip.length()==0){//as we have reached leaf node, so we have got a possible output
            ans.push_back(op);
            return;
        }
        string op1 = op;
        string op2 = op;
        //2 recursive calls for alphabet ip[0]
        if(isalpha(ip[0])){ //if ip[0] is an alphabet, then either make it lowercase or upper case
            op1.push_back(tolower(ip[0]));
            op2.push_back(toupper(ip[0]));
            ip.erase(ip.begin()+0);
            solve(ip,op1);//2 recursive calls
            solve(ip,op2);
            return;
        }
        //only 1 recursive call if ip[0] is a digit
        else{ //if ip[0] is a digit
            op.push_back(ip[0]);//no choice, simply include ip[0] as it is
            ip.erase(ip.begin()+0);//decision has been made for ip[0]
            solve(ip,op);//only 1 recursive call
            return;
        }
    }
    vector<string> letterCasePermutation(string s) {
        string temp = "";//empty string 
        solve(s,temp);
        return ans;
    }
};
