----------------------------------------------
//O(N) Time and O(1) space- 2 Pass Algorithm
----------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if(head->next==NULL)
        {
            return NULL;//we delete the only node from the linked list
        }
        int prevPos = 0;//stores the position of element previous to the one to be deleted
        int len = 0;
        ListNode* temp = head;
        //Calculate the length of the linked list
        while(temp)
        {
            temp = temp->next;
            len++;
        }
        //the position of the node just before the target node:
        prevPos = len-n;
        
        if(prevPos==0)//if the previous node 's position is 0, it means we have to delete the head itself
        {
            return head->next;//we must delete the head itself
        }
        //Otherwise:
        //save the head of the ll and traverse the ll to delete the target element 
        temp = head;
        while(prevPos--)
        {
            if(prevPos==0)//we have reached the position next to which we need to delete the element
            {
                temp->next = temp->next->next;
                break;
            }
            temp = temp->next;
        }
        return head;
    }
};
//-------------------------------------------------------------------
//1 Pass Algorithm using Slow and Fast Pointers: 
//TC: O(N) just one single pass of iteration!
//SC: O(1)
//Initially create a gap between slow and fast , gap = n
//Phir slow and fast dono ko age move karo..notice slow and fast ke beech ka distnance humesha hi 'n' rahega
//Jaise hi fast end pe hoga, to slow usse n nodes peeche hoga, to wohi node target ki previous node hai

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* start = new ListNode(0);//take a dummy node
        start->next = head;
        ListNode* slow = start;
        ListNode* fast = start;
        
        for(int i = 1;i<=n;i++){
            //move the fast by n steps
            fast = fast->next;
        }
        //now move both slow and fast pointers forward until fast reaches the end
        while(fast->next!=NULL){
            slow = slow->next;
            fast = fast->next;
        }
        //fast has reached the last node
        slow->next = slow->next->next;
        return start->next;
    }
};
