  // You start exploring every substring from the start of the string, and check if its in the dictionary. 
  // If it is, then you check if it is possible to form rest of the string using the dictionary words. 
  // If yes, my answer is true. If none of the substrings qualify, then our answer is false.
  -----------------------------------------------------------------------------------------------------
class Solution
{
public:
unordered_map<string,int>mp;
    int solve(string A, vector<string> &B)
    {
        int n = A.length();
        //base case:
        if(n==0) //agar A empty string hai to iska matlab jo first subpart tha wo poora 
        //original string tha aur wo mil bhi gaya tha 
        {
            return mp[A] = 1;
        }
        
        //memoisation:
        if(mp[A]!=0)
        {
            return mp[A];
        }
        
        //topdown:
        for(int i = 1;i<=n;i++){
            string ss = A.substr(0,i);//take out a substr of A from 0th index of length = i
            int flag = 0;
            for(int j = 0;j<B.size();j++){ //we compare the substring with each word in the dictionary
                if(ss.compare(B[j])==0)
                {
                    flag = 1; //hume pehla hissa mil gaya hai ie substr(0,i) mil gaya hai,
                    //ab us recurion to find baaki ka hissa
                    break;
                }
            }
            if(flag==1 && solve(A.substr(i,n-i),B)==1)//agar using recursion even the 
            //second subpart has been found,then it means poora part has been found
            {
                return mp[A] = 1;
            }
        }
        return mp[A] = -1;//if no substring of string A was found in dictionary 
    }
    int wordBreak(string A, vector<string> &B) {
        //code here
       int ans = solve(A,B);
       if(ans == 1)
       {
           return 1;
       }
       return 0;
    }
};

// { Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        vector<string> dict;
        for(int i=0;i<n;i++){
            string S;
            cin>>S;
            dict.push_back(S);
        }
        string line;
        cin>>line;
        Solution ob;
        cout<<ob.wordBreak(line, dict)<<"\n";
    }
}
  // } Driver Code Ends
