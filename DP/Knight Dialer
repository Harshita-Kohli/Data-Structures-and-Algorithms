class Solution {
public:
    int mod = 1000000007;
    int knightDialer(int n) {
        //from 0 we can hop to 4 or 6
        //from 1 we can hop to 6 or 8..and so on....
        vector<vector<int>> hops = {{4,6},{6,8},{7,9},{4,8},{0,3,9},{},{0,1,7},{2,6},{1,3},{2,4}};
        int ans = 0;
        //Bottom up method:
        vector<vector<int>>t(n+1,vector<int>(10,0));//2d dp array of size (n+1)*10...Here rows represent the no of steps taken...and columns represent the digit reached
        
        for(int i = 1;i<=n;i++){
            for(int j = 0;j<10;j++){
                // if(i==0) t[i][j] = 0; //initialise the 0th row with 0s because we have 0 no of steps, so we can't reach any digit
                if(i==1) 
                {
                    t[i][j] = 1; //initialise the first row with 1s because we have 1 no of step to reach all the digits using 1 step
                    continue;
                }
                for(auto it:hops[j]){ //iterate over all the nodes from where we can reach digit j
                    t[i][j]=(t[i][j] + t[i-1][it])%mod; //eg: t[2][0] = t[1][4]+t[1][6] becoz 0 is reachable from 4 and 6 using total 2 steps(1 step to reach 4 or 6, 2nd step to reach 0)
                }
            }
        }
        //now we need to do summation of all the last row entries
        //This gives us the total no of distinct ways to dial a number of length n (n is the no of steps used to dial the number, so we seek the nth row entries)
        for(int j = 0;j<10;j++){
            ans = (ans+t[n][j])%mod;
        }
        return ans;
    }
};
