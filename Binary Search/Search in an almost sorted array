
Given an array which is sorted, but after sorting some elements are moved to either of the adjacent positions, i.e., arr[i] may be present at arr[i+1] or arr[i-1]. Write an efficient function to search an element in this array. Basically the element arr[i] can only be swapped with either arr[i+1] or arr[i-1].
For example consider the array {2, 3, 10, 4, 40}, 4 is moved to next position and 10 is moved to previous position.
//------------------------------------------------------------------------------------------------

//Binary Search: O(nlogn)
//----------------------------------------
int position(vector<int>nums, int key)
{
    int n = nums.size();
    int l = 0;
    int u = n-1;
    while(l<=u)
    {
        int mid = (l+u)/2;
        if(arr[mid]==key)
        {
            return mid;
        }
        else if(mid<e && arr[mid+1]==key)
        {
            return mid+1; 
        }
        else if(mid>s && arr[mid-1]==key)
        {
            return mid-1;
        }
        else if(arr[mid]<key) //we need to move towards the left by 2 coz we have already checked mid and mid-1
        {
            s = mid+2;
        }
        else{ //we need to move towards right by 2 positions coz we have already checked mid and mid+1
            e = mid-2;
        }
    }
    return -1;
}
