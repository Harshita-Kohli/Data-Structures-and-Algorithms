-------------------------------------------------------
Top DOWN APPROACH: 
TC: O(N)
SC:O(N)
-------------------------------------------------------------------
#include<bits/stdc++.h>
int solve(int idx, vector<int> &nums, vector<int>&t)
{
    //base case:
    if(idx==0)//we have reached 0th index only becoz we didn't include 1st index in the sum, so to maximise the sum, we must include 0th index element 
    {
        return nums[idx];
    }
    if(idx<0)
    {
        return 0;//coz we have reached out of bounds, and we don't have any element at -ve index
    }
    if(t[idx]!=-1)//avoid recomputation of overlapping subproblems
    {
        return t[idx];
    }
    int pick = nums[idx]+solve(idx-2, nums,t);
    int notpick = 0+solve(idx-1,nums,t);
    return t[idx] = max(pick, notpick);
}
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    //top down
    int n = nums.size();
    vector<int>t(n,-1);//1d dp array
    return solve(n-1, nums,t);
}
---------------------------------------------------------------------------------------------------
BOTTOM Up:
TC: O(N) SC:O(N)
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
   
    int n = nums.size();
    int t[n+1];//1d dp array
    if(n==0)//if there is no house, we return 0, as we can't make any sum
    {
        return 0;
    }
    t[0] = 0;
    t[1] = nums[0];//if only a single element, then we have to include it in the sum
    for(int i = 2;i<n+1;i++)
    {
        int pick = nums[i-1]+t[i-2];
        int notpick = 0+t[i-1];
        t[i] = max(pick,notpick);
    }
    return t[n];
}
------------------------------------------------------------------------------------
SPACE OPTIMISED APPROACH:
//At any time, we just need the last two states ie n-1 and n-2 tak ka max sum
//     TC:O(N) SC:O(1)
-----------------------------------------------------------------------------------
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    
    int n = nums.size();
    int first = 0;
    int sec = nums[0];
    if(n==0) return first;
    if(n==1) return sec;
    int third = 0;
    for(int i = 1;i<n;i++)
    {
        int pick = nums[i]+first;
        int notpick = 0+sec;
        int third = max(pick,notpick);
        first = sec;
        sec = third;
    }
    return sec;
}
