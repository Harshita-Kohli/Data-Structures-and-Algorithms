//Brute force: Linear Search O(n)
//------------------------------------------------
//Optimised Approach: Binary Search O(nlogn)
//Similar to first and last occurence
//Count = lastpos-firstpos+1;
//-----------------------------------------
//{ Driver Code Starts

#include<bits/stdc++.h>

using namespace std;


// } Driver Code Ends
//User function template for C++
class Solution{
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int count(int arr[], int n, int x) {
	    // code here
	    int lpos = -1;
	    int rpos = -1;
	    int l = 0;
	    int u = n-1;
	    while(l<=u)
	    {
	        int mid = l+(u-l)/2;
	        if(arr[mid]==x)
	        {
	            lpos = mid;
	            u = mid-1;
	        }
	        else if(arr[mid]<x)
	        {
	            l = mid+1;
	        }
	        else
	        {
	            u = mid-1;
	        }
	    }
	    l = 0;
	    u = n-1;
	    while(l<=u)
	    {
	        int mid = l+(u-l)/2;
	        if(arr[mid]==x)
	        {
	            rpos = mid;
	            l = mid+1;
	        }
	        else if(arr[mid]<x)
	        {
	            l = mid+1;
	        }
	        else
	        {
	            u = mid-1;
	        }
	    }
	    if(rpos!=-1 && lpos!=-1)
	    {
	        return rpos-lpos+1;
	    }
	    return 0;
	}
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, x;
        cin >> n >> x;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.count(arr, n, x);
        cout << ans << "\n";
    }
    return 0;
}

// } Driver Code Ends
