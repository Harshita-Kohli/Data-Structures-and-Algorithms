-------------------------------------
//BOTTOM UP LCS Variation:
TC: O(N*N)
SC: O(N*N)
---------------------------------------------
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
	public:
	int lcs(string s1, string s2)
	{
	    int n = s1.length();
	    int t[n+1][n+1];
	    //initialisation:
	    for(int i = 0;i<n+1;i++)
	    {
	        for(int j = 0;j<n+1;j++)
	        {
	            if(i==0 || j==0)//either string is empty
	            {
	                t[i][j] = 0;
	            }
	        }
	    }
	    for(int i = 1;i<n+1;i++)
	    {
	        for(int j = 1;j<n+1;j++)
	        {
	            if(s1[i-1]==s2[j-1] && i!=j)//it means there is repeated occurence of the matching character
	            {
	                t[i][j] = 1+t[i-1][j-1];
	            }
	            else //not matching characters
	            {
	                t[i][j] = max(t[i-1][j], t[i][j-1]);
	            }
	        }
	    }
	    return t[n][n];
	}
		int LongestRepeatingSubsequence(string str){
		    // Code here
		    return lcs(str,str);
		    
		}

};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		string str;
		cin >> str;
		Solution obj;
		int ans = obj.LongestRepeatingSubsequence(str);
		cout << ans << "\n";
	}
	return 0;
}
// } Driver Code Ends
