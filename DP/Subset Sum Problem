class Solution{   
public:
    bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        int n = arr.size();
        bool t[n+1][sum+1]; //2-d dp array of boolean type
        
        //initialisation:
        for(int i = 0;i<n+1;i++){
            for(int j = 0;j<sum+1;j++){
                if(i==0) {
                    t[i][j] = false; //if array size is 0, no subset is possibel with sum j
                }
                if(j==0){
                    t[i][j] = true;//if target sum is 0, we have a null set as a subset, so true
                }
            }
        }
        
        //filling the rest of the matrix:
        for(int i = 1;i<n+1;i++){
            for(int j = 1;j<sum+1;j++){
                if(arr[i-1]<=j)//either include it or exclude it and take OR of the 2 answers
                {
                    t[i][j] = t[i-1][j-arr[i-1]] || t[i-1][j];
                }
                else{//can't include:
                    t[i][j] = t[i-1][j];
                }
            }
        }
        return t[n][sum];
        
    }
};
