//{ Driver Code Starts
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};


// } Driver Code Ends
/* Structure of the linked list node is as
struct Node 
{
    int data;
    struct Node* next;
    Node(int x) { data = x;  next = NULL; }
};
*/
//O(nlogn) time complexity of merge sort becoz we split the linked list into 2 halves 
//and then take linear time to merge the two halves
    //Split the linked List repeatedly at middle , 
    //then merge each of the two linked lists using merge 2 linked lists wala code
    
    Node*mergekro(Node*l1,Node*l2)
   {
       if(l1==NULL)
       return l2;
       
       if(l2==NULL)
       return l1;
       
       if(l1->data<l2->data){
       l1->next=mergekro(l1->next,l2);
       return l1;
       
       }
       
       else
       {
       l2->next=mergekro(l1,l2->next);
       return l2;
       }
   }
   //function for splitting the linked list at middle after finding the middle
   Node* mergeSort(Node* head) {
        if(head==NULL||head->next==NULL)
        return head;
       
       // your code here
       Node*slow=head;
       Node*fast=head;
       Node*temp=NULL;
       //split from middle 
       while(fast!=NULL&&fast->next!=NULL)
       {   temp=slow;
           slow=slow->next;
           fast=fast->next->next;
           
       }
       Node*mid = slow;
       temp->next=NULL;
       Node*l1=mergeSort(head);
       Node*l2=mergeSort(mid);
       return mergekro(l1,l2);
   }
};


//{ Driver Code Starts.

void printList(Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

void push(struct Node** head_ref, int new_data) {
    Node* new_node = new Node(new_data);

    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}

int main() {
    long test;
    cin >> test;
    while (test--) {
        struct Node* a = NULL;
        long n, tmp;
        cin >> n;
        for (int i = 0; i < n; i++) {
            cin >> tmp;
            push(&a, tmp);
        }
        Solution obj;
        a = obj.mergeSort(a);
        printList(a);
    }
    return 0;
}
// } Driver Code Ends
