---------------------------------------------------------------------------------------------------------------------
Sort the jobs in descending order of profit.
We try to perform the task at the last day of deadline of that task so that we can do other tasks on the previous days, and this way we get the maximum profit and we perform maximum no of jobs.
The more no of jobs we do in this descending order wali array, the more profit we make.
It is better to perform jobs as late as possible coz suppose you perform a job of deadline = 3 at the 1st day itself, then you would not be performing the job having deadline= 1, and thus you could miss out on some of the extra profit. 

TC: nlogn for sorting and O(n) for iterating over the sorted array and for each job in this array, you are checking all the days on and before its deadline  =>O(n*m), where m is the maximum deadline out of all jobs 
=>TC: O(nlogn)+O(n*m)
=>SC: O(m) , m is the maximum deadline out of all jobs coz we make an array of m size
-----------------------------------------------------------------------------------------------------
//{ Driver Code Starts
// Program to find the maximum profit job sequence from a given array 
// of jobs with deadlines and profits 
#include<bits/stdc++.h>
using namespace std; 

// A structure to represent a job 
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
}; 


// } Driver Code Ends
/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    static bool cmp(Job &a, Job &b)
    {
        //sort the jobs in descending order of the profits
        return a.profit>b.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        sort(arr,arr+n,cmp);
        int maxprofit = 0;
        int count = 0;
        int maxdead = arr[0].dead;
        //find the maximum out of all deadlines..actually we wanna find the last day out of all the given deadline days
        for(int i = 1;i<n;i++){
            maxdead = max(maxdead, arr[i].dead);
        }
        //create an array of size = maximum deadline, each index denotes a day  
        //this will have the track of which job id performed on which day
        vector<int>slot(maxdead+1,-1);
        
        //iterate over the sorted array of jobs and try finding 
        //the last day for each job which is on or very close to the deadline of that job
        for(int i = 0;i<n;i++){
            for(int j = arr[i].dead;j>0;j--)//to perform on the last possible day
            {
                if(slot[j]==-1)//if no other job has already been done on the jth day,
                //we must perform the ith job on its very deadline wala day
                {
                    slot[j] = arr[i].id;
                    count++;
                    maxprofit+=arr[i].profit;
                    break; //break coz this job can be performed only on one day and we have performed it on the jth day!
                }
            }
        }
        return {count,maxprofit};
    } 
};

//{ Driver Code Starts.
// Driver program to test methods 
int main() 
{ 
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        Job arr[n];
        
        //adding id, deadline, profit
        for(int i = 0;i<n;i++){
                int x, y, z;
                cin >> x >> y >> z;
                arr[i].id = x;
                arr[i].dead = y;
                arr[i].profit = z;
        }
        Solution ob;
        //function call
        vector<int> ans = ob.JobScheduling(arr, n);
        cout<<ans[0]<<" "<<ans[1]<<endl;
    }
	return 0; 
}



// } Driver Code Ends
