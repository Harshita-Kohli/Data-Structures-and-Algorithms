/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//Recursive Approach: O(n) space(becoz of call stack) and O(n) time
class Solution {
public:
    int maxDepth(TreeNode* root) {
        //base case:
        if(root==NULL)
        {
            return 0;
        }
        int leftans = solve(root->left);
        int rightans = solve(root->right);
        
        return 1+max(leftans,rightans);
    }
};
//iterative:O(n) space(becoz of queue) and O(n) time
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL)
        {
            return 0;
        }
        queue<pair<TreeNode*,int>>q;
        q.push({root,1});
        int maxDist = 0;
        while(!q.empty())
        {
            TreeNode* curr = q.front().first;
            int currdist = q.front().second;
            q.pop();
            maxDist = max(maxDist,currdist);
            if(curr->left)
            {
                q.push({curr->left,1+currdist});
            }
            if(curr->right)
            {
                q.push({curr->right,1+currdist});
            }
        }
        return maxDist;
    }
};
