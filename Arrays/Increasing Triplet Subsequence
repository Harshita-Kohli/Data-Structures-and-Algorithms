 //TC: O(N)
 //SC: O(1)
 //--------------------------------------------------------
class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();
        int one = INT_MAX;
        int two = INT_MAX;
        for(int i = 0;i<n;i++){
            if(nums[i]<one){ //agar ye number one se chota hai to isko one bana do
                one = nums[i];
            }
            //agar ye number one aur two ke beech me hai, to ise two bana do
            else if(nums[i]>one && nums[i]<two){
                two = nums[i];
            }
            //agar ye number two se bada hai , iska matlab one<two<nums[i], so such a triplet is possible, return true
            else if(nums[i]>two){
                return true;
            }
        }
        return false;
    }
    //----------------------------------------------------------
    //Longest Increasing Subsequence:
    //Gives TLE
    // bool increasingTriplet(vector<int>& nums) {
    //     int n = nums.size();
    //     vector<int>t(n+1,0);
    //     int currmax = 0;
    //     t[0] = 1;//for the first element, the lis will be of length = 1
    //     for(int i = 1;i<n;i++){
    //         currmax = 0;
    //         for(int j = 0;j<i;j++){
    //             if(nums[j]<nums[i]){
    //                 //we have found a smaller element
    //                 currmax = max(currmax,t[j]);
    //             }
    //         }
    //         //after checking all the previous elements, we update the length of lis ending at ith index
    //         t[i] = currmax+1;
    //         if(t[i]==3) return true;
    //     }
    //     return false;
    // }
};
