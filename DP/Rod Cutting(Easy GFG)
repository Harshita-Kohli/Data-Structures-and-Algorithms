Given a rod of length N inches and an array of prices, price[] that contains prices of all pieces of size smaller than N. Determine the maximum value obtainable by cutting up the rod and selling the pieces.
Example 1:

Input:
N = 8
Price[] = {1, 5, 8, 9, 10, 17, 17, 20}

Output:
22

Explanation:
The maximum obtainable value is 22 by
cutting in two pieces of lengths 2 and 
6, i.e., 5+17=22.

Expected Time Complexity: O(N2)
Expected Auxiliary Space: O(N)

Constraints:
1 ≤ N ≤ 1000
1 ≤ Ai ≤ 105

// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function Template for C++

class Solution{
  public:
    int cutRod(int price[], int n) {
        //code here
        vector<int> length(n,0);
        for(int i = 0;i<n;i++){
            length[i] = i+1;//we make a length array to store all the possible lengths of the rod
        }
        int t[n+1][n+1];//2d dp array, where t[i][j] denotes the maximum value obtainable by cutting the rod of length j into piece of length = length[i-1]
        for(int i = 0;i<n+1;i++){
            for(int j = 0;j<n+1;j++){
                if(i==0 || j==0){
                    t[i][j] = 0;//no profit can be made if length of rod is 0 or if size of length array is 0
                }
            }
        }
        
        for(int i = 1;i<n+1;i++){
            for(int j = 1;j<n+1;j++){
                if(length[i-1]<=j){ //agar j(length of rod) is greater than or equal to length[i-1] ie. length into which we can cut it
                    //either we can cut into length[i-1] or not
                    t[i][j] = max(price[i-1]+t[i][j-length[i-1]],t[i-1][j]);
                }
                else{ //agar length of rod < length into which we can cut the rod
                    //we cannot cut into length[i-1]
                    t[i][j] = t[i-1][j];
                }
            }
        }
        return t[n][n];
    }
};
