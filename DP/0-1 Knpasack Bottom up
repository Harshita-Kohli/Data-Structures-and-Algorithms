class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       //Bottom up approach:
       int t[n+1][W+1]; //2d dp array, where t[i][j] stores the amount of profit made for if there are i no of items and knapsack capacity is j
       //initialisation of dp array
       for(int i = 0;i<=n;i++){
           for(int j = 0;j<=W;j++){
               if(i==0 || j==0){
                   t[i][j] = 0;
               }
           }
       }
       //iterative method to fill rest of the matrix
        for(int i = 1;i<=n;i++){
           for(int j = 1;j<=W;j++){
               if(wt[i-1]<=j) //either include or exclude
               {
                 t[i][j] = max(val[i-1]+t[i-1][j-wt[i-1]], t[i-1][j]);  
               }
               else{ //can't include
                   t[i][j] = t[i-1][j];
               }
           }
        }
           return t[n][W];
    }
};
