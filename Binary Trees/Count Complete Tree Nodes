/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 //TC: O(logn * logn)
 //SC: Stack space due to recursion
 //-----------------------------------------------------------------------
class Solution {
public:
int helper(TreeNode* root){
    //base case:
    if(root==NULL) return 0;

    //compute left and right height for the root
    int lefth = 0;
    int  righth = 0;
    TreeNode* leftpointer = root;
    TreeNode* rightpointer = root;
   //left height
    while(leftpointer){
        lefth++;
        leftpointer = leftpointer->left;
    }
    //right height
    while(rightpointer){
        righth++;
        rightpointer = rightpointer->right;
    }
    //if the left height is same as right height, then use formula
    if(lefth==righth)
    {
        return pow(2,lefth)-1;
    }
    //else we will have to compute the no of nodes for both the left and the right subtree recursively
    return 1+helper(root->left)+helper(root->right);
}
    int countNodes(TreeNode* root) {
        //edge case:
        if(root==NULL){
            return 0;
        }
        int ans = helper(root);
        return ans;
    }
};
