int minimumNumber(int n, string password) {
    // Return the minimum number of characters to make the password strong
    vector<int>temp(4,0);//array of size = 4, temp[0] means count of lowercase, temp[1] is count of uppercase, temp[2] is count of special, temp[3] is count of digit
    int count1 = 6-n;
    int count2 = 0;
    for(int i = 0;i<n;i++)
    {
        if(password[i]>='a' && password[i]<='z')//lowercase
        {
            temp[0]++;
        }
        else if(password[i]>='A' && password[i]<='Z')//uppercase
        {
            temp[1]++;
        }
        if(password[i]>='!' && password[i]<='+' || password[i]=='-')//special
        {
            temp[2]++;
        }
        if(password[i]>='0' && password[i]<='9')//digit
        {
            temp[3]++;
        }
    }
    for(int i = 0;i<4;i++)
    {
        if(temp[i]==0)
        {
            count2++;
        }
    }
    return max(count1, count2);
    
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string password;
    getline(cin, password);

    int answer = minimumNumber(n, password);

    fout << answer << "\n";

    fout.close();

    return 0;
}
