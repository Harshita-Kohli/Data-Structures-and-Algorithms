//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
//User function template for C++
class Solution{
public:
	
	int findMaximum(int arr[], int n) {
	    // code here
	    //Brute Force: Linear Search 
	    //TC:O(N)
	    //SC:O(1)
	   //--------------------------------------------------------- 
	    //Binary Search approach:
	    //TC: O(logN)
      //SC:O(1)
	    int s = 0;
	    int e = n-1;
	    int mid = 0;
	    while(s<=e)
	    {
	        mid = s+(e-s)/2;
	        if(mid>0 && mid<n-1)
	        {
	            if(arr[mid]>arr[mid+1] && arr[mid]>arr[mid-1])
    	        {
    	            return arr[mid];
    	        }
    	        else if(arr[mid]<arr[mid+1])//the right side of mid looks more promising, as we are in the increasing part, so we move to the right of mid to reach the peak
    	        
    	            s = mid+1;
    	        }
    	        else if(arr[mid]<arr[mid-1])// the left side of mid looks more promising, as we are in the dec part, so we move to the left of mid to reach peak
    	        {
    	            e = mid-1;
    	        }
	        }
	        else if(mid==n-1) //if mid has reached the last element, then last element is the peak
	        {
	            return arr[mid];
	        }
	    }
	       return arr[mid];
	}
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        int arr[n];
        for (i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.findMaximum(arr, n);
        cout << ans << "\n";
    }
    return 0;
}

// } Driver Code Ends
