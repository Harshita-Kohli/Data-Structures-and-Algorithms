//GREEDY: We use the charcter with highest frequency first and then reduce its freq and pop it
    //temporarily so that the another can be used...then later, this one is again used
    //TC:O(nlogn) for heap sort since max heap is used and is doing maxheapification
    //SC: O(no of unique alphabets in str) coz we use map and priority queue 
    ----------------------------------------------------------------------
//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;
const int MAX_CHAR = 26;

// } Driver Code Ends
class Solution
{
    public:
    string rearrangeString(string str)
    {
        //code here
        //maxheap:
        priority_queue<pair<int,char>,vector<pair<int,char>>>maxh;//key will be frequency and value will be the character
        map<char,int>mp;
        for(int i = 0;i<str.length();i++)
        {
            mp[str[i]]++;
        }
        for(auto it:mp)
          {
            maxh.push({it.second, it.first});//key is freq and value is the character 
          }
       pair<int,char> prev = {-1,'#'};
       string res = "";
        while(!maxh.empty())
        {
            pair<int,char> temp = maxh.top();//save the top of the heap
            maxh.pop();//pop the top
            res+=temp.second;
            temp.first--;//reduce the freq of the charcter since it has been added to res string
            if(prev.first>0)
            {
                maxh.push(prev);
            }
            prev = temp;//make current as the prev now
        }
            // cout<<res<<endl;
        if(res.length()!=str.length())
        {
            return "-1";
        }
       return res; 
    }
};

//{ Driver Code Starts.
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    string str;
	    cin>>str;
	    Solution ob;
	    string str1=ob.rearrangeString(str);
	    int flag=1;
	    int c[26] = {0};
	    for(int i=0; i<str.length(); i++)
	        c[str[i]-'a']+=1;
	    int f = 0;
	    int x = (str.length()+1)/2;
	    for(int i=0; i<26; i++)
	    {
	        if(c[i]>x)
	            f = 1;
	    }
	    if(f)
	    {
	        if(str1=="-1")
	            cout<<0<<endl;
	        else
	            cout<<1<<endl;
	    }
	    else
	    {
    	    int a[26] = {0};
    	    int b[26] = {0};
    	    for(int i=0; i<str.length(); i++)
    	        a[str[i]-'a']+=1;
    	    for(int i=0; i<str1.length(); i++)
    	        b[str1[i]-'a']+=1;
    	        
    	    for(int i=0; i<26; i++)
    	        if(a[i]!=b[i])
    	            flag = 0;
    	    
    	    for(int i=0;i<str1.length();i++)
    	    {
    		    if(i>0)
    		        if(str1[i-1]==str1[i])
    			        flag=0;
    	    }
    	    if(flag==1)
    		    cout<<"1\n";
    	    else
    	        cout<<"0\n";
	    }
	}
    return 0;
}
// } Driver Code Ends
