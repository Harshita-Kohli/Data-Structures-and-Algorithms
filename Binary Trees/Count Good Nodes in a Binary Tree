/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//TC: O(n) coz we are traversing each node 1 time
//SC: No extra space except for the stack space
//-------------------------------------------------
class Solution {
public:
    int count = 0;
    void helper(TreeNode* root, int maxim)
    {
        //base case:
        if(root==NULL)
        {
            return;
        }
        
        if(root->val>=maxim)
        {
            maxim = root->val;
            count++;
        }
        //recursive case:
        helper(root->left,maxim);
        // maxim = root->val;
        helper(root->right,maxim);
    }
    int goodNodes(TreeNode* root) {
        if(root==NULL)//empty tree, so no good node
        {
            return 0;
        }
        if(!root->left && !root->right)
        {
            return 1; //becoz the root itself is the only good node 
        }
        int maxim = INT_MIN;
        helper(root,maxim);
        return count;
    }
};
