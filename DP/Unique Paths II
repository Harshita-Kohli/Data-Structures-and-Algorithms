//Bottom Up Solution : O(n*m) Time and O(n*m) space
---------------------------------------------------------------
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();//no of rows
        int n = obstacleGrid[0].size();//no of columns
        if(obstacleGrid[0][0]==1)
        {
            return 0;
        }
        //set the value for the first cell acc to whther it has obstacle or not
        
        obstacleGrid[0][0]=1; //one way to reach the start position
        for(int i = 1;i<m;i++)//first column
        {
            if(obstacleGrid[i][0]==1)//obstacle in first row
            {
                obstacleGrid[i][0]=0; //no way to reach it
            }
            else
            {
                obstacleGrid[i][0]=obstacleGrid[i-1][0];//the no of ways to reach (i,0) is same as no of ways to reach (i-1,0)
            }
        }
        for(int j = 1;j<n;j++)//first row
        {
            if(obstacleGrid[0][j]==1)//obstacle in first row
            {
                obstacleGrid[0][j]=0;
            }
            else
            {
                obstacleGrid[0][j]=obstacleGrid[0][j-1];
            }
        }
        //filling the rest of the matrix:
        for(int i = 1;i<m;i++)
        {
            for(int j = 1;j<n;j++)
            {
                if(obstacleGrid[i][j]!=1)
                {
                    obstacleGrid[i][j] = obstacleGrid[i-1][j]+obstacleGrid[i][j-1];
                }
                else //if this cell has an obstacle
                {
                     obstacleGrid[i][j] = 0;//no way tp reach it
                }
            }
        }
         return obstacleGrid[m-1][n-1]; 
    }
};
