class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
        int t[n+1][amount+1];
        for(int i = 0;i<n+1;i++){
            for(int j = 0;j<amount+1;j++){
                if(i==0) t[i][j] = INT_MAX-1;
                if(j==0) t[i][j] = 0;//if amount = 0, we need 0 coins
            }
        }
        for(int i = 1;i<n+1;i++){
            for(int j = 1;j<amount+1;j++){
                if(coins[i-1]<=j) //either include or exclude the coin
                {
                    t[i][j] = min(1+t[i][j-coins[i-1]], t[i-1][j]);
                }
                else{ //exclude the coin
                    t[i][j] = t[i-1][j];
                }
            }
        }
        if(t[n][amount]==INT_MAX-1)
        {
            return t[n][amount] = -1;
        }
        return t[n][amount];
    }
};
--------------------------------------------------------------------------------
Top Down Approach: 
TC: O(n*target)
SC: O(n*target) coz of 2d dp array
---------------------------------------------------------------------------
int t[1001][1001];//2d dp array
	int solve(int coins[], int n, int target)
	{
	    //base case:
	    if(n==0)
	    {
	        return t[n][target] = INT_MAX-1;//not possible to make the change
	    }
	    if(target==0)
	    {
	        return t[n][target] = 0;//coz we need 0 coins to make the change
	    }
	    if(t[n][target]!=-1)
	    {
	        return t[n][target];
	    }
	    //recursive:
	    if(coins[n-1]<=target) //either include or exclude
	    {
	        t[n][target] = min(1+solve(coins,n, target-coins[n-1]), solve(coins,n-1, target));
	    }
	    else 
	    {
	        t[n][target] =solve(coins,n-1, target);
	    }
	   
	    return t[n][target];
	}
	int minCoins(int coins[], int M, int V) 
	{ 
	    // Your code goes here
	    //topdown
	    memset(t,-1,sizeof(t));
	    int ans = solve(coins,M,V);
	     if(ans==INT_MAX-1)
	    {
	        return -1;
	    }
	} 
