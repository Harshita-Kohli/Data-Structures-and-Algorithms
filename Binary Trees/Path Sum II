/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//TC: O(N) coz we iterate once over all the n nodes in this preorder traversal
//SC: recursion stack space
//-------------------------------------------------------------------------------------
class Solution {
public:
    vector<vector<int>>ans;
    vector<int>temp;
    int sum = 0;
    void helper(TreeNode* root, int target){
        if(root==NULL){
            return;
        }
        //PREORDER traversal(root->left->right)+Backtracking
        //Step1:  root:
        sum+=root->val;
        temp.push_back(root->val);
        
        
        if(!root->left && !root->right){ //we have reached the leaf node
            if(sum==target)
            {
                ans.push_back(temp);
            }
            
            return;
        }
        //recursive case:
        //Step2: left:
        helper(root->left,target);
        if(root->left){//if root was having a left, only then 
            sum-=root->left->val;//backtrack
            temp.pop_back();
        }
        //Step3: right:
        helper(root->right,target);
        if(root->right){
            sum-=root->right->val;//backtrack
            temp.pop_back();
        }
        return;
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        if(root==NULL){
            return vector<vector<int>>();//return an empty vector
        }
        helper(root,targetSum);
        return ans;
    }
};
