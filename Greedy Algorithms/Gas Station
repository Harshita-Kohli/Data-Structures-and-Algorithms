class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int n = gas.size();
        int gasLeft = 0;
        int curr = 0;
         int start = 0;
        for(int i = 0;i<n;i++)
        {
            gasLeft += gas[i]-cost[i];
        }
        if(gasLeft<0) return -1;//because gas left in car is<0 which means that total cost of gas to complete the journey is more than available gas
        else
        {
            for(int i = 0;i<n;i++){
               curr+= gas[i]-cost[i];
                if(curr<0)//if car runs out of fuel, we must change the starting point to i+1
                {
                    start = i+1;//set start to i+1 because if we were not able to reach i with adequate gas, it means all indices before and including i cannot become the start point. So, start should be i+1
                    curr=0;//reset curr to 0 to start the journey from new starting point
                }
            }
        }
        return start;
    }
};
