/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isIdentical(TreeNode* root, TreeNode* subRoot)
    {
        if(root==NULL && subRoot==NULL) return true;
        if(root==NULL || subRoot==NULL)//if one tree is empty, return false
        {
            return false;
        }
       if(root->val==subRoot->val) //if roots match
        {
            if(isIdentical(root->left,subRoot->left) && isIdentical(root->right,subRoot->right))//if subtrees also match then identical
            {
                return true;
            }
        }
       
        return false;
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(root==NULL && subRoot==NULL) //if both are empty trees
        {
            return true;
        }
        if(root==NULL || subRoot==NULL)//if one tree is empty, return false
        {
            return false;
        }
        if(root->val==subRoot->val) //if roots match, check if the left and right subtree are identical
        {
            if(isIdentical(root->left,subRoot->left) && isIdentical(root->right,subRoot->right))
            {
                return true;
            }
        }
        // if root values don't match, check if either left or right subtree has the target subtree
        
        if(isSubtree(root->left,subRoot) || isSubtree(root->right,subRoot))
        {
            return true;
        }
        
        return false;
    }
};
