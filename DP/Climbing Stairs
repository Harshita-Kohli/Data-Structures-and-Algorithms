You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45
---------------------------------------
// class Solution {
// public:
//     //recursive approach: O(2^n) approach, gives TLE because we do re-computatin
//     int climbStairs(int n) {
//         if(n==0 || n==1)//we have to reach 0th stair, so we can do that in 1 way
//         {
//             return 1;
//         }
//         return climbStairs(n-1)+climbStairs(n-2);//either take one step or two steps, and add the answer of each of the 2 cases
//     }
// };
//------------------------------------------------------------------
//Top Down DP Approach: Recursion+Memoization
// class Solution {
// public:
//    int t[46];//1d dp array because the only varying parameter is the no of steps left
//     int topDown(int n){
//         //base case
//         if(n==0 || n==1){
//             return t[n] = 1;//1 way only
//         }
//         //use of memoisation to avoid recomputation of overlapping subproblems:
//         if(t[n]!=-1){
//             return t[n];
//         }
//         return t[n] = topDown(n-1)+topDown(n-2);
//     }
//     int climbStairs(int n) {
//         memset(t,-1,sizeof(t));
//         return topDown(n);
//     }
// };
//----------------------------------------------------
//Bottom-Up Approach: O(n) Time and O(n) space
// class Solution {
// public:
//      int climbStairs(int n) {
//          int t[n+1];//1d dp array
//          //initialisation
//          t[0] = 1;
//          t[1] = 1;
//          //filling the rest of the dp array
//          for(int i = 2;i<n+1;i++){
//              t[i] = t[i-1]+t[i-2];
//          }
//          return t[n];//this stores the total no. of ways to reach nth stair
//       }
// };   
//----------------------------------------------------
//Space Optimised Bottom-Up Approach: O(n) time and O(1) space
class Solution {
public:
     int climbStairs(int n) {
         //we notice that at a time we just need the last two entries in the dp array to compute t[i]
         int first;
         int second;
         //initialisation:
         first = 1;//this is the initialisation for 0 and 1 no of steps
         second = 1;
         
         for(int i = 2;i<n+1;i++){
             int temp = first;
             first = second;
             second = temp+second;
         }
         return second;
     }
};
//---------------------------------------------------------
