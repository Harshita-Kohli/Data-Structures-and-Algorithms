/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
//TC: O(N)
//SC: O(N) coz we used a queue
//---------------------------------------------------
class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        //using iterative bfs technique
        if(root==NULL)
        {
            return vector<vector<int>>();//return empty vector
        }
        vector<vector<int>>ans;
        queue<Node*>q;
        q.push(root);
        while(!q.empty())
        {
            ans.emplace_back();
            int sz = q.size();//this will store the no of nodes of the current level
            while(sz>0) //keep pushing the current level nodes into one row of ans vector
            {
                Node* n = q.front();
                q.pop();
                ans.back().push_back(n->val);
                //now push all the children of n into the queue
                for(Node* child: n->children)
                {
                    q.push(child);
                }
                sz--;//since we have processed the current node, decrement the sz
            }
        }
        return ans;
    }
};
