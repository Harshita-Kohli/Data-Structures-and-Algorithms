O(n) time coz we are traversing all n nodes once. O(n) space coz we are using temp array to store each string temporarily
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string>ans;
    void solve(TreeNode* root, string temp)
    {        
        if(root==NULL)
        {
            return;
        }
        if(temp.length()!=0)
        {
            temp+="->";
        }
        
        temp+=to_string(root->val);//concatenate root value
        
        if(root->left==NULL && root->right==NULL)//leaf node
        {
            ans.push_back(temp);
            return;
        }
        
        solve(root->left,temp);
        solve(root->right,temp);
        return;
    }
    vector<string> binaryTreePaths(TreeNode* root) {
       if(root==NULL)
       {
           return vector<string>();//return empty vector of strings
       }
        solve(root,"");
        return ans;
    }
};
