-----------------------------------------------------------------------------------------------------
//Use SLIDING WINDOW APPROACH:
//TC: O(N)
//SC: O(1)
------------------------------------------------------------------------------------------------------
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    //Function to find a continuous sub-array which adds up to a given number.
    vector<int> subarraySum(int arr[], int n, long long s)
    {
        // Your code here
        int sum = 0;
        int i = 0;
        int j = 0;
        while(j<n)
        {
            sum+=arr[j];
            if(sum==s)
            {
                return {i+1,j+1};//we add 1 to the 0-based index to make it 1-based
            }
           
            if(sum>s)
            {
                //also check that i should not exceed j while moving it forward
                while(sum>s && i<=j) //if i exceeds j, then it means our window was not maintained
                {
                    sum-=arr[i];
                    i++;
                }
            }
            if(sum==s && i<=j) //suppose if after shrinking the window from front, the sum == target sum , then return the start and end indices of the subarray
            {
                return {i+1,j+1};
            }
            j++;
        }
        return {-1};
    }
};

//{ Driver Code Starts.

int main()
 {
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        long long s;
        cin>>n>>s;
        int arr[n];
        const int mx = 1e9;
        for(int i=0;i<n;i++)
        {
            cin>>arr[i];
        }
        Solution ob;
        vector<int>res;
        res = ob.subarraySum(arr, n, s);
        
        for(int i = 0;i<res.size();i++)
            cout<<res[i]<<" ";
        cout<<endl;
        
    }
	return 0;
}
// } Driver Code Ends
