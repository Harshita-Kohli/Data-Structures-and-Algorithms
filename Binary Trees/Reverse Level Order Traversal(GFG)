//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    struct Node *left;
    struct Node *right;
};
// Utility function to create a new Tree Node
Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;
    
    return temp;
}
// Function to Build Tree
Node* buildTree(string str)
{   
    // Corner Case
    if(str.length() == 0 || str[0] == 'N')
            return NULL;
    
    // Creating vector of strings from input 
    // string after spliting by space
    vector<string> ip;
    
    istringstream iss(str);
    for(string str; iss >> str; )
        ip.push_back(str);
        
    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));
        
    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);
        
    // Starting from the second element
    int i = 1;
    while(!queue.empty() && i < ip.size()) {
            
        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();
            
        // Get the current node's value from the string
        string currVal = ip[i];
            
        // If the left child is not null
        if(currVal != "N") {
                
            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->left);
        }
            
        // For the right child
        i++;
        if(i >= ip.size())
            break;
        currVal = ip[i];
            
        // If the right child is not null
        if(currVal != "N") {
                
            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));
                
            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }
    
    return root;
}

vector<int> reverseLevelOrder(Node* root);

int main()
{

    int t;
    scanf("%d ",&t);
    while(t--)
    {
        string s;
        getline(cin,s);
        Node* root = buildTree(s);
        vector<int> result = reverseLevelOrder(root);
        for (int i = 0; i < result.size(); ++i)
        {
            cout<<result[i]<<" ";
        }
        cout<<endl;
    }
    return 1;
}
// } Driver Code Ends


/*   
struct Node
{
    int data;
    Node* left;
    Node* right;
}; */
//-----------------------------------------------
//TC: O(N)
//Sc: O(N)+O(N*N)
//We use a temp array and a 2-d array ans. Here we first insert the nodes of one level into temp
//Then, for each level, we populate the 2-d array ans and atlast we reverse the 2-d array to store levels in reverse order
//then again populate temp
//-------------------------------------------------------------------------
vector<int> reverseLevelOrder(Node *root)
{
    // code here
    // vector<int>temp;
    // vector<vector<int>>ans;
    // if(root==NULL)
    // {
    //     return vector<int>();//return empty vector
    // }
    // queue<Node*>q;
    // q.push(root);
    // q.push(NULL);
    // while(!q.empty())
    // {
    //     Node* n = q.front();
    //     q.pop();
    //     if(n!=NULL)
    //     {
    //         temp.push_back(n->data);
    //         if(n->left)
    //         {
    //             q.push(n->left);
    //         }
    //         if(n->right)
    //         {
    //             q.push(n->right);
    //         }
    //     }
    //     else if(n==NULL)
    //     {
    //         if(!q.empty())
    //         {
    //             q.push(NULL);
    //         }
    //         ans.push_back(temp);
    //         temp.clear();
    //     }
    // }
    // reverse(ans.begin(),ans.end());
    // for(int i = 0;i<ans.size();i++)
    // {
    //     for(int j = 0;j<ans[i].size();j++)
    //     {
    //         temp.push_back(ans[i][j]);
    //     }
        
    // }
    // return temp;
    //-----------------------------------------------------------------
    //Method 2:
    //TC: O(N)
    //SC: O(N) coz we are using a single 1-d array temp
    // Using single temp array only
    //Do simple level order traversal and push the children in the order: right and left
//then simply reverse the temp vector
//-----------------------------------------------------------------------------
    vector<int>temp;
    if(root==NULL)
    {
        return vector<int>();//return empty vector
    }
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty())
    {
        Node* n = q.front();
        q.pop();
        if(n!=NULL)
        {
            temp.push_back(n->data);
            if(n->right)//push right child first
            {
                q.push(n->right);
            }
            if(n->left)//then push left child into queue
            {
                q.push(n->left);
            }
        }
        else if(n==NULL)
        {
            if(!q.empty())
            {
                q.push(NULL);
            }
        }
    }
    //suppose temp is: {10 30 20 60 40}
    //then upon reversing it, temp = {40,60,20,30,10}
    reverse(temp.begin(),temp.end());//we reverse the temp array to get the reverse level order
    return temp;
}
