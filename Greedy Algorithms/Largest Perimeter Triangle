//Greedy based:
//TC: O(n log n) + O(n) because of sorting and linear traversal 
//SC: O(1) no extra space used
//----------------------------------------
class Solution {
public:
    int largestPerimeter(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        for(int i = n-1;i>=2;i--){
            if(nums[i-1]+nums[i-2]>nums[i]){
                return nums[i-1]+nums[i-2]+nums[i];
            }
        }
        return 0;
    }
};
