//Recursive Approach:
TC: Exponential, coz we are performing all possible partitions repeatedly for each subproblem...so we must optimise this using memoisation
SC: O(satck space)
------------------------------------------------------------------------------------------------
//Top Down: 
// TC: O(N*N*N) coz for all n*n states, we run a k loop to find the best partition
//SC: O(N*N)coz of 2d dp array + O(stack space) 
// --------------------------------------------------
// class Solution {
// public:
//     int t[302][302];//2d dp array of size (n+2)*(n+2)
//     int solve(int i, int j,vector<int>& nums)
//     {
//         //base case:
//         if(i>j)
//         {
//             //there is no balloon, so we can't burst anything
//             return 0;
//         }
//         if(t[i][j]!=-1)
//         {
//             return t[i][j];
//         }
//         //recursive: for this range of i and j find all possible partitions k. Here partitions mean we will make each balloon as the last bursted balloon and compute the cost by taking it as the last bursted balloon ..thinking in the reverse order
//         int maxim = INT_MIN;
//         for(int k = i;k<=j;k++)
//         {
//             //the cost will be the cost to burst kth ballon which is the last bursted balloon, and add the answers of recursive calls to left and right subproblems...these subproblems are indepedent and so can be solved independently
//             int cost = nums[i-1]*nums[k]*nums[j+1] + solve(i,k-1,nums)+solve(k+1,j,nums);
//             maxim =  max(maxim, cost);
//         }
//         return t[i][j] = maxim;
//     }
//     int maxCoins(vector<int>& nums) {
//         int n = nums.size(); //we save the initial size of the array nums
//        nums.insert(nums.begin(),1);
//         nums.insert(nums.end(),1);
        
//         memset(t,-1,sizeof(t));
        
//         //MCM problem
//         //step1: find valid values of i and j...i = 1 kyunki hum 1st balloon se start karenge partition..aur har balloon ko last bursted balloon samjhenge
// //till nth balloon
//     return solve(1,n,nums);
//     }
// };
-----------------------------------------------------------------
//Bottom Up Approach:
//TC: O(N*N*N) coz for each n*n states,we run a k-loop that can take ~ N time
//SC: O(N*N) becoz of the 2d array( no stack space is used here!! So we reduced the SC)
//-----------------------------------------------------
class Solution {
public:
int maxCoins(vector<int>& nums) {
    
    int n = nums.size(); //we save the initial size of the array nums
    
    nums.insert(nums.begin(),1);//put 1 at beginning and end of the array
    nums.insert(nums.end(),1);
    vector<vector<int>>t(n+2, vector<int>(n+2,0));//2d dp array of size (n+2)*(n+2) coz i can go from 1 to n and j can go frpm n to 1...we do n+2 becoz t[k+1] can go out of bounds
    //copy the base case:
    //write the i and j in reverse order:
    for(int i = n;i>=1;i--)
    {
        for(int j = 1;j<=n;j++)
        {
            if(i>j)
            {
                t[i][j] = 0;
                continue;//we can't have any range so donot do the k loop
            }
            int maxim = INT_MIN;
            for(int k = i;k<=j;k++)//perform all valid partitions
            {
                int cost = nums[i-1]*nums[k]*nums[j+1] + t[i][k-1]+t[k+1][j];
                maxim = max(maxim,cost);
            }
            t[i][j] = maxim;
        }
    }
    return t[1][n];//this will store the final answer
    }
};
