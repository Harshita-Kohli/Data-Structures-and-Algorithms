//{ Driver Code Starts
// Initial template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template in C++

class Solution 
{
    public:
    bool isPossible(int mid, int N, int M, int A[]){
        int studCount = 1;
        int pageSum = 0;
        //try to allocate books to all the M students now
        for(int i = 0;i<N;i++){
            pageSum+= A[i];
            if(pageSum>mid){
                //take a new student now
                studCount++;
                pageSum = A[i];//now the page sum for the new student starts from A[i]
            }
            //ek baar check karlo kahin stud count > M to nahi ho gaya
            if(studCount>M)
            {
                return false;
            }
        }
        return true;
    }
    //Function to find minimum number of pages.
    int findPages(int A[], int N, int M) 
    {
        //code here
        //edge case:
        if(M>N){ //agar no of students> no of books, then the given condition is not satisfied
            return -1;//that each book should be allocated to just one student
        }
        int s = A[N-1];
        int e = 0;
        int sum = 0;
        //sum nikallo no of pages ka from all the books
        for(int i = 0;i<N;i++){
            sum+=A[i];
        }
        e = sum;
        int ans = -1;//initially
        while(s<=e){
            
            int mid = s+(e-s)/2;
            //check kar ki ye scheme valid hai ya nahi
            if(isPossible(mid, N, M , A)){
                ans = mid;//ans save karlo
                e = mid-1;//aur chekc karo ki isse chota ans possible hai ya nahi
            }
            else
            { //if scheme fails, then check to the right of mid
                s = mid+1;
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int A[n];
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        int m;
        cin>>m;
        Solution ob;
        cout << ob.findPages(A, n, m) << endl;
    }
    return 0;
}

// } Driver Code Ends
