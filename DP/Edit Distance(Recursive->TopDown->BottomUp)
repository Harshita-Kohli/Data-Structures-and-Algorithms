-------------------------------------------------------------------
//recursion: O(3^n) ie exponential time complexity
//Space: O(n+m) stack space for recursion
----------------------------------------------------------------
class Solution {
public:
    int solve(int m, int n, string &word1, string &word2)
    {
        //base case:
        if(m==0)//first string gets exhausted or is empty
        {
            return n;//we need to do n insertions in word1
        }
        if(n==0)//second string is exhausted or is empty
        {
            return m;//we need m deletions from word1  
        }
        
        //recursive case:
        if(word1[m-1]==word2[n-1])//both characters are matching, so do nothing at these characters, simply use recursion for computing min steps for smaller strings
        {
            return solve(m-1, n-1, word1, word2);
        }
        else
        {
            int op1 = 1+solve(m, n-1, word1, word2);//insertion in word1
            int op2 = 1+solve(m-1,n,word1, word2);//deletion in word1
            int op3 = 1+solve(m-1,n-1, word1, word2);//replacement in word1
            return min(op1, min(op2, op3));
        }
    }
    int minDistance(string word1, string word2) {
        int m = word1.length();
        int n = word2.length();
        return solve(m,n, word1, word2);
    }
};
-----------------------------------------------------------------------------
Recursion+Memoisation(Top-Down)
TC: O(N*M) 2 nested for loops
SC: O(N*M)+O(N+M) for 2d array and stack space
----------------------------------------------------------------------------------------
class Solution {
public:
    int t[501][501];//2d dp array, where t[m][n] denotes the min no of steps to convert s1 of length m to s2 of length n
    int solve(int m, int n, string &word1, string &word2)
    {
        //base case:
        if(m==0)//first string gets exhausted or is empty
        {
            return n;//we need to do n insertions in word1
        }
        if(n==0)//second string is exhausted or is empty
        {
            return m;//we need m deletions from word1  
        }
        if(t[m][n]!=-1)//avoid recomputation of overlapping subproblems
        {
            return t[m][n];
        }
        //recursive case:
        if(word1[m-1]==word2[n-1])//both characters are matching, so do nothing at these characters, simply use recursion for computing min steps for smaller strings
        {
            return t[m][n] = solve(m-1, n-1, word1, word2);
        }
        else
        {
            int op1 = 1+solve(m, n-1, word1, word2);//insertion in word1
            int op2 = 1+solve(m-1,n,word1, word2);//deletion in word1
            int op3 = 1+solve(m-1,n-1, word1, word2);//replacement in word1
            return t[m][n] = min(op1, min(op2, op3));
        }
    }
    int minDistance(string word1, string word2) {
        //Top down:
        memset(t,-1, sizeof(t));
        int m = word1.length();
        int n = word2.length();
        return solve(m,n, word1, word2);
    }
};
-----------------------------------------------------------------------------------------
Tabulation(Bottom-Up)
TC: O(N*M) 2 nested for loops
SC: O(N*M) for 2d array 
----------------------------------------------------------------------------------------
class Solution {
public:
        int minDistance(string word1, string word2) {
            //bottom up:
            int m = word1.length();
            int n = word2.length();
            int t[m+1][n+1];//2d dp array coz 2 parameters (n,m) are changing in recursive calls of topdown
            //where t[i][j] denotes min no steps to convert s1 of length i to s2 of length j
            //Initialisation:
            for(int i = 0;i<m+1;i++)//first column ie if word2 is empty
            {
                t[i][0] = i;//do i no of deletions
            }
             for(int j = 0;j<n+1;j++)//first row ie. if word1 is empty
            {
                t[0][j] = j;//do j no of insertions
            }
            //Filling the rest of the matrix:
            for(int i = 1;i<m+1;i++)
            {
                for(int j = 1;j<n+1;j++)
                {
                    if(word1[i-1]==word2[j-1])
                    {
                        t[i][j] = t[i-1][j-1];//no need to do any operation
                    }
                    else
                    {
                        int op1 = 1+t[i][j-1];//insertion in word1
                        int op2 = 1+t[i-1][j];//deletion in word1
                        int op3 = 1+t[i-1][j-1];//replacement in word1
                        t[i][j] = min(op1, min(op2, op3));
                    }
                }
            }
            return t[m][n];
        }
};
